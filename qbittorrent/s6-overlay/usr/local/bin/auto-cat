#!/bin/bash

base_fun() {
    . /usr/local/bin/share
    categories=( $($cmd_curl ${api_url_base}/torrents/categories | jq -r .[].name | sed "s# #%20#g") )
}

category_one() {
    local torrent_hash="$1"
    local tracker=$($cmd_curl ${api_url_base}/torrents/trackers?hash=${torrent_hash} | jq -r .[].url | grep -m1 -i "http" | awk -F "://|/" '{print $2}' | awk -F "." '{print $((NF - 1))}')
    if [[ $tracker == edu ]]; then
        tracker=$($cmd_curl ${api_url_base}/torrents/trackers?hash=${torrent_hash} | jq -r .[].url | grep -m1 -i "http" | awk -F "://|/" '{print $2}' | awk -F "." '{print $((NF - 2))}')
    fi
    local category=$($cmd_curl ${api_url_base}/torrents/info?hashes=${torrent_hash} | jq -r .[].category | sed "s# #%20#g")

    if [[ -z $(echo ${categories[@]} | grep -wo "$tracker") ]]; then
        $cmd_curl_post -d "category=$tracker" ${api_url_base}/torrents/createCategory
    fi
    if [[ $category != $tracker ]]; then
        $cmd_curl_post -d "hashes=${torrent_hash}&category=${tracker}" ${api_url_base}/torrents/setCategory
    fi
}

category_all_uncategorized() {
    local hashes=( $($cmd_curl ${api_url_base}/torrents/info?category= | jq -r .[].hash) )

    if [[ $ENABLE_AUTO_CATEGORY != false ]]; then
        for hash in "${hashes[@]}"; do
            category_one "$hash"
        done
    else
        echo "(W) $(date +'%Y-%m-%dT%H:%M:%S') - [$(basename $0)] 你已将 ENABLE_AUTO_CATEGORY 设置为 false，禁止自动分类..."
    fi
}

category_all() {
    local hashes=( $($cmd_curl ${api_url_base}/torrents/info | jq -r .[].hash) )

    if [[ $ENABLE_AUTO_CATEGORY != false ]]; then
        for hash in "${hashes[@]}"; do
            category_one "$hash"
        done
    else
        echo "(W) $(date +'%Y-%m-%dT%H:%M:%S') - [$(basename $0)] 你已将 ENABLE_AUTO_CATEGORY 设置为 false，禁止自动分类..."
    fi
}

usage() {
    echo "用法："
    echo "auto-cat -a        # 将所有未分类的种子按tracker分类"
    echo "auto-cat -A        # 将所有种子按tracker分类"
    echo "auto-cat -h        # 使用帮助"
    echo "auto-cat -i <hash> # 指定某个种子的hash，将其按tracker分类"
}

main() {
    while getopts :aAhi: OPT; do
        case $OPT in
            a)
                base_fun
                category_all_uncategorized
                ;;
            A)
                base_fun
                category_all
                ;;
            h)
                usage
                ;;
            i)
                base_fun
                category_one "$OPTARG"
                ;;
            ?)
                usage
                exit 2
                ;;
        esac
    done
    shift $((OPTIND - 1))
}

main "$@"
